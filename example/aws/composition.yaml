apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: shell-example
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
    - step: pull-extra-resources
      functionRef:
        name: function-extra-resources
      input:
        apiVersion: extra-resources.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          extraResources:
            - kind: ProviderConfig
              into: ProviderConfig
              apiVersion: aws.upbound.io/v1beta1
              type: Selector
              selector:
                maxMatch: 1
                minMatch: 1
                matchLabels:
                - key: crossplane.io/claim-namespace
                  type: Value
                  value: demo
    - step: shell
      functionRef:
        name: function-shell
      input:
        apiVersion: shell.fn.crossplane.io/v1alpha1
        kind: Parameters
        shellEnvVars:
          - key: AWS_ROLE_ARN
            value: arn:aws:iam::00000002:role/ProviderAWS
          - key: AWS_ASSUME_ROLE_ARN
            valueFromExtraResourcesField: "ProviderConfig[0].spec.assumeRoleChain[0].roleARN"
        shellCommand: |
          ASSUME_ROLE_OUTPUT=$(aws sts assume-role --role-arn $AWS_ASSUME_ROLE_ARN --role-session-name "function-shell")
          export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE_OUTPUT | grep -o '"AccessKeyId": "[^"]*"' | cut -d'"' -f4)
          export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE_OUTPUT | grep -o '"SecretAccessKey": "[^"]*"' | cut -d'"' -f4)
          export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE_OUTPUT | grep -o '"SessionToken": "[^"]*"' | cut -d'"' -f4)
          aws eks list-clusters | jq -r '.clusters[0]'
        stdoutField: status.atFunction.shell.stdout
        stderrField: status.atFunction.shell.stderr
